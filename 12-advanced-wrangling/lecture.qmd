---
title: "R 語言的 50 + 練習：統計分析的前哨站"
subtitle: "進階資料框操作"
author: "郭耀仁"
title-block-banner: true
execute:
  echo: true
format: 
  revealjs:
    theme: dark
    footer: "進階資料框操作"
    scrollable: true
    incremental: false
---

# 關於進階的資料框操作

## （複習）資料科學的應用場景有哪些

- **Import 資料的載入**。
- **Tidy 資料清理**。
- **Transform 資料外型與類別的轉換**。
- Visualize 資料視覺化。
- Model 分析與預測建模。
- Communicate 溝通分享。

![](../images/wrangle.png)

來源：<https://r4ds.had.co.nz/program-intro.html>

## 進階的資料框操作

- 以迴圈走訪資料框的列或欄。
- 處理遺漏值。
- 轉置資料框。
- 單純合併資料框。
- 關聯資料框。

## 與關聯式資料庫 `imdb.db` 連線

```{r}
#| eval: false
install.packages("RSQLite")
```

```{r}
library("DBI")

working_directory <- "/Users/kuoyaojen/Desktop/ch12/"
file_name <- "imdb.db"
file_path <- paste0(working_directory, file_name)
connection <- DBI::dbConnect(RSQLite::SQLite(), file_path)
# setwd(working_directory)
# connection <- DBI::dbConnect(RSQLite::SQLite(), file_name)
```

## 載入關聯式資料庫 `imdb.db` 中的資料表

```{r}
DBI::dbListTables(connection)
movies <- DBI::dbReadTable(connection, name = "movies")
casting <- DBI::dbReadTable(connection, name = "casting")
DBI::dbDisconnect(connection)
```

# 以迴圈走訪資料框的列或欄

## 如何以迴圈走訪資料框的欄

- 使用 `colnames()` 函數取得所有的欄名。
- 讓欄名從第一個更改至最後一個。 

```{r}
col_names <- colnames(movies)
for (col_name in col_names) {
  print(col_name)
}
```

## 如何以迴圈走訪資料框的欄（續）

顯示每一欄的資料。

```{r}
#| eval: false
for (col_name in col_names) {
  each_column <- movies[[col_name]]
  print(each_column)
}
```

## 如何以迴圈走訪資料框的列

- 使用 `nrow()` 函數取得列數。
- 讓列索引從 `1` 更改至 `nrow(df)`。 

```{r}
n_row <- nrow(movies)
for (row_i in 1:n_row) {
  print(row_i)
}
```

## 如何以迴圈走訪資料框的列（續）

顯示每一列的資料。

```{r}
#| eval: false
for (row_i in 1:n_row) {
  each_row <- movies[row_i, ]
  print(each_row)
}
```

# 處理遺漏值

## 檢查遺漏值是否存在

使用 `is.na()` 函數檢查。

```{r}
primes_with_na <- c(2, NA, 5, NA, 11)
is.na(primes_with_na)
```

## 以篩選觀測值的技巧刪除遺漏值

```{r}
df <- data.frame(
  "row_index" = 1:5,
  "prime" = primes_with_na
)
df
is_not_na <- !is.na(df[["prime"]])
df[is_not_na, ]
```

## 填補遺漏值

- 使用 `tidyr` 套件的 `replace_na()` 函數與 `fill()` 函數。
- `tidyr` 套件包含許多資料清理、轉置的函數。
- 與 `dplyr` 套件同屬於 `tidyverse` 套件組合。

## 安裝與載入

```{r}
#| eval: false
install.packages("tidyr")
```

```{r}
library("tidyr")
```

## 使用 `tidyr` 套件的 `replace_na()` 函數填補遺漏值

填補為指定資料。

```{r}
primes_with_na |>
  tidyr::replace_na(5566)
```

## 使用 `tidyr` 套件的 `fill()` 函數填補遺漏值

- 指定參數 `.direction = "down"` 遇到遺漏值就用前一個值來填補。
- 指定參數 `.direction = "up"` 遇到遺漏值就用後一個值來填補。

```{r}
df |>
  tidyr::fill(prime, .direction = "down")
df |>
  tidyr::fill(prime, .direction = "up")
```

# 轉置資料框

## 轉置資料框的函數

- 使用 `tidyr` 套件的 `pivot_longer()` 函數可以將資料框由寬格式轉換為長格式。
- 使用 `tidyr` 套件的 `pivot_wider()` 函數可以將資料框由長格式轉換為寬格式。

## 什麼是寬格式、長格式

- 寬格式使用一個欄位儲存資料，欄位名稱記錄變數類別、觀測值記錄數值。 
- 長格式使用兩個欄位儲存資料，一個欄位記錄變數類別、一個欄位記錄數值。

來源：<https://en.wikipedia.org/wiki/Wide_and_narrow_data>

## 寬格式使用欄位名稱記錄變數類別、觀測值記錄其數值

```{r}
persons <- c("Bob", "Alice", "Steve")
ages <- c(32, 24, 64)
weights <- c(168, 150, 144)
heights <- c(180, 175, 165)
wide_format <- data.frame(
  "person" = persons,
  "age" = ages,
  "weight" = weights,
  "height" = heights
)
wide_format
```

## 使用 `tidyr` 套件的 `pivot_longer()` 函數可以將資料框由寬格式轉換為長格式

- `cols` 參數指定數值的欄位。
- `names_to` 參數指定變數類別的欄命名。
- `values_to` 參數指定數值的欄命名。

```{r}
long_format <- wide_format |>
  tidyr::pivot_longer(cols = c("age", "weight", "height"),
                      names_to = "variable",
                      values_to = "value")
```

## 長格式使用一個欄位記錄變數類別、一個欄位記錄數值

```{r}
long_format
```

## 使用 `tidyr` 套件的 `pivot_wider()` 函數可以將資料框由長格式轉換為寬格式

- `id_cols` 參數指定「非」數值的欄位。
- `names_from` 參數指定變數類別的欄命名。
- `values_from` 參數指定數值的欄命名。

```{r}
long_format |>
  tidyr::pivot_wider(id_cols = "person",
                     names_from = "variable",
                     values_from = "value")
```

# 單純合併資料框

## 單純合併資料框的函數

- 使用 `rbind()` 函數單純垂直合併。
- 使用 `cbind()` 函數單純水平合併。

## 要進行單純垂直合併的資料框

```{r}
upper_df <- data.frame(
  "title" = "The Lord of the Rings: The Fellowship of the Rings",
  "release_year" = 2001
)
lower_df <- data.frame(
  "title" = c("The Lord of the Rings: The Two Towers", "The Lord of the Rings: The Return of the King"),
  "release_year" = c(2002, 2003)
)
```

## 使用 `rbind()` 函數單純垂直合併

```{r}
rbind_df <- rbind(upper_df, lower_df)
rbind_df
```

## 要進行單純水平合併的資料框

```{r}
left_df <- data.frame(
  "title" = c("The Lord of the Rings: The Fellowship of the Rings", "The Lord of the Rings: The Two Towers", "The Lord of the Rings: The Return of the King")
)
right_df <- data.frame(
  "release_year" = 2001:2003
)
```

## 使用 `cbind()` 函數單純水平合併

```{r}
cbind_df <- cbind(left_df, right_df)
cbind_df
```

# 關聯資料框

## 什麼是關聯資料框

資料框之間能夠進行觀測值與變數的交集、聯集的運算，實踐類似資料庫的關聯式模型，包含與交集對應的內部連接（Inner join）、左外部連接（Left join）、右外部連接（Right join）以及與聯集對應的全外部連接（Full join）。

## 四種連接

1. 內部連接（Inner join），保留兩個關聯資料框交集的觀測值。
2. 左外部連接（Left join），保留左資料框所有的觀測值。
3. 右外部連接（Right join），保留右資料框所有的觀測值。
4. 全外部連接（Full join），保留兩個關聯資料框聯集的觀測值。

## 關聯資料框的兩種操作

1. 使用 `merge()` 函數進行四種連接。
2. 使用 `dplyr` 套件的函數進行四種連接。

## 欲關聯的兩個資料框

```{r}
left_df <- movies[movies$id %in% 1:5, ]
right_df <- casting[casting$movie_id %in% c(1, 4, 6), ]
left_df
right_df
```

## 使用 `merge()` 函數進行四種連接

- 以參數 `by.x` 與 `by.y` 分別指定關聯所依據的左資料框、右資料框變數。
- 以參數 `all.x` 與 `all.y` 排列組合實踐四種連接。

## 以參數 `all.x` 與 `all.y` 排列組合實踐四種連接

- `all.x = FALSE`、`all.y = FALSE` 實踐內部連接（預設）。
- `all.x = TRUE`、`all.y = FALSE` 實踐左外部連接。
- `all.x = FALSE`、`all.y = TRUE` 實踐右外部連接。
- `all.x = TRUE`、`all.y = TRUE` 實踐全外部連接。

## 使用 `merge()` 函數進行內部連接

```{r}
merge_df <- merge(left_df, right_df, by.x = "id", by.y = "movie_id")
merge_df
unique(merge_df$title)
```

## 使用 `merge()` 函數進行左外部連接

```{r}
merge_df <- merge(left_df, right_df, by.x = "id", by.y = "movie_id",
                  all.x = TRUE, all.y = FALSE)
merge_df
unique(merge_df$title)
```

## 使用 `merge()` 函數進行右外部連接

```{r}
merge_df <- merge(left_df, right_df, by.x = "id", by.y = "movie_id",
                  all.x = FALSE, all.y = TRUE)
merge_df
unique(merge_df$title)
```

## 使用 `merge()` 函數進行全外部連接

```{r}
merge_df <- merge(left_df, right_df, by.x = "id", by.y = "movie_id",
                  all.x = TRUE, all.y = TRUE)
merge_df
unique(merge_df$title)
```

## 使用 `dplyr` 套件的函數進行四種連接

- 以參數 `by` 指定關聯所依據的左資料框、右資料框變數。
- 使用 `dplyr` 套件的 `inner_join()` 函數實踐內部連接。
- 使用 `dplyr` 套件的 `left_join()` 函數實踐左外部連接。
- 使用 `dplyr` 套件的 `right_join()` 函數實踐右外部連接。
- 使用 `dplyr` 套件的 `full_join()` 函數實踐全外部連接。

## 使用 `dplyr` 套件的 `inner_join()` 函數實踐內部連接

```{r}
merge_df <- dplyr::inner_join(left_df, right_df,
                              by = c("id" = "movie_id"))
merge_df
unique(merge_df$title)
```

## 使用 `dplyr` 套件的 `left_join()` 函數實踐左外部連接

```{r}
merge_df <- dplyr::left_join(left_df, right_df,
                             by = c("id" = "movie_id"))
merge_df
unique(merge_df$title)
```

## 使用 `dplyr` 套件的 `right_join()` 函數實踐右外部連接

```{r}
merge_df <- dplyr::right_join(left_df, right_df,
                              by = c("id" = "movie_id"))
merge_df
unique(merge_df$title)
```

## 使用 `dplyr` 套件的 `full_join()` 函數實踐全外部連接

```{r}
merge_df <- dplyr::full_join(left_df, right_df,
                              by = c("id" = "movie_id"))
merge_df
unique(merge_df$title)
```

# 個案研究：Covid-19 時間序列

## （複習）載入 `covid19` 原始資料來源

- `read.csv()` 函數除了可以指定本機電腦中的檔案路徑，也可以指定網址。
- 原始資料來源：[JHU CSSE COVID-19 Dataset](https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data)

## 建立時間序列載入網址

```{r}
time_series_route <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/"
confirmed_file_name <- "time_series_covid19_confirmed_global.csv"
deaths_file_name <- "time_series_covid19_deaths_global.csv"
confirmed_file_url <- paste0(time_series_route, confirmed_file_name)
deaths_file_url <- paste0(time_series_route, deaths_file_name)
```

## 分別載入確診與死亡數的時間序列資料

```{r}
time_series_confirmed <- read.csv(confirmed_file_url)
time_series_deaths <- read.csv(deaths_file_url)
dim(time_series_confirmed)
dim(time_series_deaths)
```

## 使用 `tidyr` 套件的 `pivot_longer()` 函數將時間序列資料由寬格式轉換為長格式

```{r}
cols_not_to_pivot <- c("Province.State", "Country.Region", "Lat", "Long")
time_series_confirmed_long <- time_series_confirmed |>
  tidyr::pivot_longer(cols = !all_of(cols_not_to_pivot), names_to = "Date", values_to = "Confirmed")
time_series_deaths_long <- time_series_deaths |>
  tidyr::pivot_longer(cols = !all_of(cols_not_to_pivot), names_to = "Date", values_to = "Deaths")
head(time_series_confirmed_long)
head(time_series_deaths_long)
```

## 使用 `sub()` 函數將日期欄位中的 `X` 取代為空字串

```{r}
time_series_confirmed_long$Date <- sub(pattern = "X", replacement = "", time_series_confirmed_long$Date)
time_series_deaths_long$Date <- sub(pattern = "X", replacement = "", time_series_deaths_long$Date)
head(time_series_confirmed_long)
head(time_series_deaths_long)
```

## 使用 `as.Date()` 函數將日期欄位轉換為 `Date` 日期向量

```{r}
from_format <- "%m.%d.%y"
time_series_confirmed_long$Date <- as.Date(time_series_confirmed_long$Date, format = from_format)
time_series_deaths_long$Date <- as.Date(time_series_deaths_long$Date, format = from_format)
head(time_series_confirmed_long)
head(time_series_deaths_long)
```

## 使用 `dplyr` 套件的 `inner_join()` 函數合併確診與死亡數的時間序列資料

```{r}
time_series <- dplyr::inner_join(time_series_confirmed_long, time_series_deaths_long,
                                 by = c("Province.State" = "Province.State",
                                        "Country.Region" = "Country.Region",
                                        "Lat" = "Lat",
                                        "Long" = "Long",
                                        "Date" = "Date"))
dim(time_series)
head(time_series)
```

## 自行定義 `import_time_series()` 函數

```{r}
import_time_series <- function() {
  time_series_route <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/"
  confirmed_file_name <- "time_series_covid19_confirmed_global.csv"
  deaths_file_name <- "time_series_covid19_deaths_global.csv"
  confirmed_file_url <- paste0(time_series_route, confirmed_file_name)
  deaths_file_url <- paste0(time_series_route, deaths_file_name)
  time_series_confirmed <- read.csv(confirmed_file_url)
  time_series_deaths <- read.csv(deaths_file_url)
  cols_not_to_pivot <- c("Province.State", "Country.Region", "Lat", "Long")
  time_series_confirmed_long <- time_series_confirmed |>
    tidyr::pivot_longer(cols = !all_of(cols_not_to_pivot), names_to = "Date", values_to = "Confirmed")
  time_series_deaths_long <- time_series_deaths |>
    tidyr::pivot_longer(cols = !all_of(cols_not_to_pivot), names_to = "Date", values_to = "Deaths")
  time_series_confirmed_long$Date <- sub(pattern = "X", replacement = "", time_series_confirmed_long$Date)
  time_series_deaths_long$Date <- sub(pattern = "X", replacement = "", time_series_deaths_long$Date)
  from_format <- "%m.%d.%y"
time_series_confirmed_long$Date <- as.Date(time_series_confirmed_long$Date, format = from_format)
time_series_deaths_long$Date <- as.Date(time_series_deaths_long$Date, format = from_format)
  time_series <- dplyr::inner_join(time_series_confirmed_long, time_series_deaths_long, by = c("Province.State" = "Province.State",
                                "Country.Region" = "Country.Region",
                                "Lat" = "Lat",
                                "Long" = "Long",
                                "Date" = "Date"))
  return(time_series)
}
```

## 使用 `import_time_series()` 函數

```{r}
time_series <- import_time_series()
dim(time_series)
```

# 重點統整

- 進階的資料框操作：
  - 以迴圈走訪資料框的列或欄。
  - 處理遺漏值。
  - 轉置資料框。
  - 單純合併資料框。
  - 關聯資料框。

## 重點統整（續）

- 寬格式使用一個欄位儲存資料，欄位名稱記錄變數類別、觀測值記錄數值。 
- 長格式使用兩個欄位儲存資料，一個欄位記錄變數類別、一個欄位記錄數值。
- 使用 `tidyr` 套件的 `pivot_longer()` 函數可以將資料框由寬格式轉換為長格式。
- 使用 `tidyr` 套件的 `pivot_wider()` 函數可以將資料框由長格式轉換為寬格式。

## 重點統整（續）

- 關聯資料框的四種連接：
  - 內部連接（Inner join），保留兩個關聯資料框交集的觀測值。
  - 左外部連接（Left join），保留左資料框所有的觀測值。
  - 右外部連接（Right join），保留右資料框所有的觀測值。
  - 全外部連接（Full join），保留兩個關聯資料框聯集的觀測值。

## 重點統整（續）

- 關聯資料框的兩種操作：
  - 使用 `merge()` 函數進行四種連接。
  - 使用 `dplyr` 套件的函數進行四種連接。
    - `dplyr::inner_join()` 函數實踐內部連接。
    - `dplyr::left_join()` 函數實踐左外部連接。
    - `dplyr::right_join()` 函數實踐右外部連接。
    - `dplyr::full_join()` 函數實踐全外部連接。